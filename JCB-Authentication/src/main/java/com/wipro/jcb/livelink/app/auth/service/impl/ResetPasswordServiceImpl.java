package com.wipro.jcb.livelink.app.auth.service.impl;

import com.wipro.jcb.livelink.app.auth.entity.ContactEntity;
import com.wipro.jcb.livelink.app.auth.exception.PasswordUpdateException;
import com.wipro.jcb.livelink.app.auth.model.MsgResponseTemplate;
import com.wipro.jcb.livelink.app.auth.model.SMSTemplate;
import com.wipro.jcb.livelink.app.auth.repo.ContactRepo;
import com.wipro.jcb.livelink.app.auth.service.ResetPasswordService;
import com.wipro.jcb.livelink.app.auth.service.UnicelSmsService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Collections;
import java.util.TimeZone;

/**
 * Author: Rituraj Azad
 * User: RI20474447
 * Date:23-07-2024
 * project: JCB-New-Common-API
 */
@Service
public class ResetPasswordServiceImpl extends ResetPasswordService {

    private static final Logger log = LoggerFactory.getLogger(ResetPasswordServiceImpl.class);

    @Autowired
    ContactRepo contactRepo;

    @Autowired
    UnicelSmsService unicelSmsService;

    public MsgResponseTemplate resetPassword(String userName) {
        try {
            if (userName.isEmpty()) {
                return new MsgResponseTemplate("Invalid username provided.", false);
            }

            String mobileNumber = contactRepo.findMobileNumberByUserID(userName);
            if (mobileNumber == null) {
                return new MsgResponseTemplate("User not found.", false);
            }
            // Check password reset attempts

            int attempts = contactRepo.resetPasswordGetAttempts(userName);
            if (attempts > 5) {
                ContactEntity contactEntity = contactRepo.findByUserContactId(userName);
                if (contactEntity != null) {
                    Calendar cal1 = Calendar.getInstance();
                    SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                    sdf1.setTimeZone(TimeZone.getTimeZone("IST"));
                    String timeStamp = sdf1.format(cal1.getTime());
                    try {
                        contactEntity.setLockedOutTime(Timestamp.valueOf(new Timestamp(sdf1.parse(timeStamp).getTime()).toLocalDateTime()));
                        contactRepo.save(contactEntity);    //Saving in the DB
                        log.info("Account locked time is :{}", timeStamp);
                    } catch (ParseException e) {
                        log.error("Error parsing date: {}", timeStamp, e);
                    } catch (Exception e) {
                        log.error("Error locking account: {}", userName, e);
                    }
                    return new MsgResponseTemplate("Maximum attempts reached for resetting the password.", false);
                } else {
                    log.error("User not found: {}", userName);
                    return new MsgResponseTemplate("User not found.", false);
                }
            }

            String autoGeneratedPassword = generatePassword();
            log.info("Password is before sending to DB: {}", autoGeneratedPassword);

            // Update password in the database first
            resetPassword(autoGeneratedPassword, userName);

            // Prepare SMS template
            SMSTemplate smsTemplate = new SMSTemplate();
            smsTemplate.setTo(Collections.singletonList(mobileNumber));
            String body = "Your new password registered with JCB LiveLink is " + autoGeneratedPassword + " . JCB LiveLink Team.; Dt:";
            smsTemplate.setMsgBody(Collections.singletonList(body));

            //SMS Send
            unicelSmsService.sendSms(smsTemplate);

            // Increment password reset attempts
            contactRepo.resetPasswordIncrementAttempts(userName);

            return new MsgResponseTemplate("Password Generated and Sent to mobile Number : " + mobileNumber, true);

        } catch (PasswordUpdateException e) {
            log.error("Error resetting password: {}", e.getMessage(), e);
            return new MsgResponseTemplate("Failed to update password. Please check the mobile number and try again.", false);

        } catch (Exception e) {
            log.error("Error resetting password: {}", e.getMessage(), e);
            return new MsgResponseTemplate("An unexpected error occurred. Please try again later.", false);
        }
    }
}
